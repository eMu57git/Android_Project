package com.example.abusmzakaria.employeeapp;

import android.app.DatePickerDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.PopupMenu;
import android.widget.RadioButton;
import android.widget.Toast;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class MainActivity extends AppCompatActivity {

    private EditText nameEt;
    private EditText phoneEt;
    private EditText emailEt;
    private EditText websiteEt;
    private Button birthdayBtn;
    private Button genderBtn;
    private String dOBInMilliSecond="";
    private String gender="Male";
    private Calendar calendar;
    private SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEEE, dd MMMM yyyy");
    private int year;
    private int month;
    private int day;
    private List<String> skills = new ArrayList<>();
    private boolean isLoggedIn = EmployeeUtils.isLogged();
    private boolean doNext = false;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        nameEt = findViewById(R.id.nameEt);
        phoneEt = findViewById(R.id.phoneEt);
        emailEt = findViewById(R.id.emailEt);
        websiteEt = findViewById(R.id.websiteEt);
        birthdayBtn = findViewById(R.id.birthdayBtn);
        genderBtn = findViewById(R.id.genderBtn);
        Button nextBtn = findViewById(R.id.nextBtn);
        calendar = Calendar.getInstance(Locale.getDefault());

        nextBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if(isLoggedIn)
                {
                    goNext();
                }
                else{
                    doNext = true;
                    showLoginDialogue("next_button");
                }
            }
        });

        birthdayBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if(!birthdayBtn.getText().toString().equals(getText(R.string.select)))
                {
                    try {
                        Date dateNew = simpleDateFormat.parse(birthdayBtn.getText().toString());
                        calendar.setTimeInMillis(dateNew.getTime());
                    } catch (ParseException e) {
                        Toast.makeText(MainActivity.this, "Error! Can not set date.", Toast.LENGTH_SHORT).show();
                    }
                }
                year = calendar.get(Calendar.YEAR);
                month = calendar.get(Calendar.MONTH);
                day = calendar.get(Calendar.DAY_OF_MONTH);
                DatePickerDialog datePickerDialog = new DatePickerDialog(MainActivity.this,
                        new DatePickerDialog.OnDateSetListener() {
                            @Override
                            public void onDateSet(DatePicker datePicker, int i, int i1, int i2) {
                                Calendar tempDate = Calendar.getInstance();
                                tempDate.set(i,i1,i2);
                                Date selectedDate = tempDate.getTime();
                                String dateText = simpleDateFormat.format(selectedDate);
                                birthdayBtn.setText(dateText);
                                dOBInMilliSecond = String.valueOf(selectedDate.getTime());
                            }
                        },
                        year, month, day);
                datePickerDialog.show();

            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_menu,menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()){
            case R.id.itemHome:

                break;
            case R.id.itemLogin:
                doNext = false;
                showLoginDialogue("item_menu");
                break;
            case R.id.itemLogout:
                isLoggedIn = false;
                Toast.makeText(this, getText(R.string.now_log_out), Toast.LENGTH_SHORT).show();
                break;
        }
        return true;
    }

    private void showLoginDialogue(final String from) {
        String messageToShow;
        switch (from)
        {
            case "item_menu":
                messageToShow = getText(R.string.welcome_to_login).toString();
                break;
            case "try_again":
                messageToShow = getText(R.string.try_again).toString();
                break;
                default:
                    messageToShow = getText(R.string.need_to_login).toString();
                    break;
        }
       LayoutInflater layoutInflater = getLayoutInflater();
       final View v = layoutInflater.inflate(R.layout.login_layout,null);

        final android.support.v7.app.AlertDialog.Builder dialogueBuilder = new android.support.v7.app.AlertDialog.Builder(this);

        dialogueBuilder.setMessage(messageToShow);
        dialogueBuilder.setView(v);
        dialogueBuilder.setCancelable(false);
        dialogueBuilder.setPositiveButton(R.string.login,
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        EditText usernameEt,passwordEt;
                        usernameEt = v.findViewById(R.id.usernameEt);
                        passwordEt = v.findViewById(R.id.passwordEt);
                        String username = usernameEt.getText().toString();
                        String password = passwordEt.getText().toString();
                        if(username.isEmpty() || password.isEmpty())
                        {
                            showLoginDialogue("try_again");
                            Toast.makeText(MainActivity.this, getText(R.string.user_pass_cant_empty), Toast.LENGTH_SHORT).show();
                        }else if(username.equals(EmployeeUtils.USERNAME) && password.equals(EmployeeUtils.PASSWORD)){
                            isLoggedIn = true;
                            if(doNext)
                            {
                                goNext();
                            }else{
                                Toast.makeText(MainActivity.this, getText(R.string.login_success).toString(), Toast.LENGTH_SHORT).show();
                            }
                        }else{
                            showLoginDialogue("try_again");
                            Toast.makeText(MainActivity.this, getText(R.string.wrong_username_pass).toString(), Toast.LENGTH_SHORT).show();
                        }
                    }
                });
        dialogueBuilder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                Toast.makeText(MainActivity.this, R.string.cancelled_process, Toast.LENGTH_SHORT).show();
            }
        });
        //after all
        dialogueBuilder.show();
    }

    private void goNext() {
        String name = nameEt.getText().toString();
        String phone = phoneEt.getText().toString();
        String email = emailEt.getText().toString();
        String website = websiteEt.getText().toString();
        if(name.isEmpty())
        {
            nameEt.setError(getText(R.string.can_not_empty));
        }else if(phone.isEmpty()){
            phoneEt.setError(getText(R.string.can_not_empty));
        }else if(email.isEmpty()){
            emailEt.setError(getText(R.string.can_not_empty));
        }else if(dOBInMilliSecond.isEmpty()){
            Toast.makeText(MainActivity.this, R.string.select_birthday, Toast.LENGTH_SHORT).show();
        }else{
            BasicInfo basicInfo = new BasicInfo(name,phone,email,website, gender, dOBInMilliSecond,skills);
            Intent intent = new Intent(MainActivity.this,AddressActivity.class);
            intent.putExtra("basicInfo", basicInfo);
            startActivity(intent);
        }
    }

    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        MenuItem loginItem = menu.findItem(R.id.itemLogin);
        MenuItem logoutItem = menu.findItem(R.id.itemLogout);
        if(isLoggedIn)
        {
            loginItem.setVisible(false);
            logoutItem.setVisible(true);
        }else{
            loginItem.setVisible(true);
            logoutItem.setVisible(false);
        }
        return true;
    }

    public void checkSkill(View view) {
        CheckBox cb = (CheckBox) view;
        if(cb.isChecked())
            skills.add(cb.getText().toString());
        else
            skills.remove(cb.getText().toString());
    }

    public void chooseGender(View view) {
        PopupMenu popupMenu = new PopupMenu(this, view);
        popupMenu.inflate(R.menu.gender_menu);
        popupMenu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem menuItem) {
                String getMenuSelectedText = menuItem.getTitle().toString();
                genderBtn.setText(getMenuSelectedText);
                gender = getMenuSelectedText;
                return false;
            }
        });
        popupMenu.show();
    }
}
